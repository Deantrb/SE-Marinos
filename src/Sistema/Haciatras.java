/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Sistema;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joset
 */
public class Haciatras extends javax.swing.JPanel {

    DefaultTableModel model;

    /**
     * Creates new form CuadroM
     */
    public Haciatras() {
        initComponents();
        rellenarCombo(jComboBox1, "Nombre", "SELECT * FROM AnimalesCara");
        String[] titulos = {"Caracteristicas",};
        model = new DefaultTableModel(null, titulos) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 1) {
                    return true;
                } else {
                    return false;
                }
            }

        };
        tblC.setEditingRow(0);
        tblC.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new Fondo();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblC = new javax.swing.JTable();
        agragarC = new javax.swing.JButton();
        eliminarC = new javax.swing.JButton();
        Inferencia = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(706, 449));
        setMinimumSize(new java.awt.Dimension(706, 449));
        setPreferredSize(new java.awt.Dimension(706, 449));

        jPanel1.setAutoscrolls(true);
        jPanel1.setMaximumSize(new java.awt.Dimension(706, 449));
        jPanel1.setMinimumSize(new java.awt.Dimension(706, 449));
        jPanel1.setRequestFocusEnabled(false);

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255,50));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("HACIA ATRAS");
        jLabel2.setToolTipText("");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        tblC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblC);

        agragarC.setText("Agregar");
        agragarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agragarCActionPerformed(evt);
            }
        });

        eliminarC.setText("Eliminar");
        eliminarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarCActionPerformed(evt);
            }
        });

        Inferencia.setText("Inferencia");
        Inferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InferenciaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jButton1)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Inferencia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(eliminarC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(agragarC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(15, 15, 15))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(agragarC)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarC)
                        .addGap(18, 18, 18)
                        .addComponent(Inferencia)))
                .addGap(42, 42, 42)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        InterfazU ie = new InterfazU();
        ie.setSize(709, 449);
        ie.setLocation(0, 0);
        jPanel1.removeAll();
        jPanel1.add(ie, BorderLayout.CENTER);
        jPanel1.revalidate();
        jPanel1.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void agragarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agragarCActionPerformed
        // TODO add your handling code here:
        if (!redundance()) {
            Object[] user = {jComboBox1.getSelectedItem().toString()};
            model.addRow(user);
        }
    }//GEN-LAST:event_agragarCActionPerformed

    private void eliminarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarCActionPerformed
        // TODO add your handling code here:
        if (tblC.getSelectedRow() >= 0)
            model.removeRow(tblC.getSelectedRow());
        else
            JOptionPane.showMessageDialog(null, "Row no seleccionada", "Error", 0);
    }//GEN-LAST:event_eliminarCActionPerformed

    private void InferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InferenciaActionPerformed
        conexion con = new conexion();
        String sql = "";
        String cad = "";
        con.ejecutarSentenciaSQL("DELETE FROM Inferencia");
        for (int i = 0; i < tblC.getRowCount(); i++) {
            sql = String.format("SELECT ID_M, ID_C,PORC FROM MarinosCar WHERE Caracteristica='%s'", tblC.getValueAt(i, 0));
            ResultSet res = con.consultaReg(sql);

            try {
                while (res.next()) {
                    sql = String.format("INSERT INTO Inferencia (ID_Marinos,ID_Carac,Peso)VALUES(%d,%d,%d)", res.getInt("ID_M"), res.getInt("ID_C"), res.getInt("PORC"));
                    con.ejecutarSentenciaSQL(sql);
                }

            } catch (SQLException ex) {
               // System.out.println(ex);
            }
        }

        ResultSet res = con.consultaReg("SELECT DISTINCT ID_Marinos FROM Inferencia");
        con.ejecutarSentenciaSQL("DELETE FROM Resultado");
        try {
            int total = 0;
            while (res.next()) {
                sql = String.format("SELECT SUM(Peso) FROM Inferencia WHERE ID_Marinos=%d", res.getInt("ID_Marinos"));
                ResultSet res2 = con.consultaReg(sql);
                sql = String.format("SELECT PORC FROM MarinosCar WHERE Caracteristica='TOTAL' AND ID_M=%d", res.getInt("ID_Marinos"));
                ResultSet res3 = con.consultaReg(sql);
                total = (res2.getInt("SUM(Peso)") * 100) / res3.getInt("PORC");
                System.out.println("asdadsa " + total);
                sql = String.format("INSERT INTO Resultado (ID_M,Total,S_Total,Porcentaje)VALUES(%d,%d,%d,%d)", res.getInt("ID_Marinos"), res2.getInt("SUM(Peso)"), res3.getInt("PORC"), total);
                con.ejecutarSentenciaSQL(sql);
                //JOptionPane.showMessageDialog(null, "El animal mas probable es: ", "Error", 0);
            }
            sql = String.format("SELECT ID,am.Nombre FROM AnimalesMarinos am JOIN Resultado r ON r.ID_M=am.ID");
            ResultSet res4 = con.consultaReg(sql);
            while (res4.next()) {
                sql = String.format("UPDATE Resultado SET Nombre='%s' WHERE ID_M=%s", res4.getString("Nombre"), res4.getInt("ID"));
                con.ejecutarSentenciaSQL(sql);
            }
            sql = String.format("SELECT Nombre, Porcentaje FROM Resultado ORDER BY Porcentaje DESC LIMIT 5");
            ResultSet res5 = con.consultaReg(sql);
            sql = String.format("SELECT MAX(Porcentaje) FROM Resultado");
            ResultSet res6 = con.consultaReg(sql);
            int v = 0;
            v = res6.getInt("MAX(Porcentaje)");
            System.out.println(v);
            while (res5.next()) {
                if (res5.getInt("Porcentaje") == v) {
                    cad = cad + "El animal marino mas probable es: " + res5.getString("Nombre") + " con un porcentaje de " + res5.getInt("Porcentaje") + "%\n";
                } else {
                    cad = cad + "Pero tambien pueden ser: " + res5.getString("Nombre") + " con un porcentaje de " + res5.getInt("Porcentaje") + "%\n";
                }

            }

        } catch (SQLException ex) {
            System.out.println(ex);
        }
        JOptionPane.showMessageDialog(null, cad, "Inferencia Directa", 1);
        limpiartabla();


    }//GEN-LAST:event_InferenciaActionPerformed

    public void rellenarCombo(JComboBox cb, String n, String tabla) {
        conexion con = new conexion();
        String c = "";
        try {
            cb.removeAllItems();
            ResultSet res = con.consultaReg(tabla);
            while (res.next()) {
                c = res.getString("Caracteristica");
                cb.addItem(c);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public boolean redundance() {
        for (int i = 0; i < tblC.getRowCount(); i++) {
            if (jComboBox1.getSelectedItem().toString().equals(tblC.getValueAt(i, 1))) {
                return true;
            }
        }
        return false;
    }

    public void limpiartabla() {
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Inferencia;
    private javax.swing.JButton agragarC;
    private javax.swing.JButton eliminarC;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblC;
    // End of variables declaration//GEN-END:variables
    class Fondo extends JPanel {

        private Image im;

        public void paint(Graphics g) {
            im = new ImageIcon(getClass().getResource("/image/fondo.jpg")).getImage();
            g.drawImage(im, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }
}
